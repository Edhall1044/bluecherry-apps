#include <curl/curl.h>

char* stringify_curl_errors_codes(CURLcode code) {
  if(code == CURLE_OK)                       return "OK";
  if(code == CURLE_UNSUPPORTED_PROTOCOL)     return "UNSUPPORTED PROTOCOL";    
  if(code == CURLE_FAILED_INIT)              return "FAILED INIT";             
  if(code == CURLE_URL_MALFORMAT)            return "URL MALFORMAT";           
  if(code == CURLE_OBSOLETE4)                return "OBSOLETE 4";
  if(code == CURLE_COULDNT_RESOLVE_PROXY)    return "COULDNT RESOLVE PROXY";
  if(code == CURLE_COULDNT_RESOLVE_HOST)     return "COULDNT RESOLVE HOST";
  if(code == CURLE_COULDNT_CONNECT)          return "COULDNT CONNECT";
  if(code == CURLE_FTP_WEIRD_SERVER_REPLY)   return "FTP WEIRD SERVER REPLY";
  if(code == CURLE_REMOTE_ACCESS_DENIED)     return "REMOTE ACCESS DENIED";
  if(code == CURLE_OBSOLETE10)               return "OBSOLETE 10";
  if(code == CURLE_FTP_WEIRD_PASS_REPLY)     return "FTP WEIRD PASS REPLY";
  if(code == CURLE_OBSOLETE12)               return "OBSELETE 12";
  if(code == CURLE_FTP_WEIRD_PASV_REPLY)     return "FTP WEIRD PASV REPLY";
  if(code == CURLE_FTP_WEIRD_227_FORMAT)     return "FTP WEIRD 227 FORMAT"; 
  if(code == CURLE_FTP_CANT_GET_HOST)        return "FTP CANT GET HOST";
  if(code == CURLE_OBSOLETE16)               return "OBSOLETE 16";
  if(code == CURLE_FTP_COULDNT_SET_TYPE)     return "FTP COULDNT SET TYPE";
  if(code == CURLE_PARTIAL_FILE)             return "PARTIAL FILE";
  if(code == CURLE_FTP_COULDNT_RETR_FILE)    return "FTP COULDNT RETR FILE";
  if(code == CURLE_OBSOLETE20)               return "OBSOLETE 20";
  if(code == CURLE_QUOTE_ERROR)              return "QUOTE ERROR";
  if(code == CURLE_HTTP_RETURNED_ERROR)      return "HTTP RETURNED ERROR";
  if(code == CURLE_WRITE_ERROR)              return "WRITE ERROR";
  if(code == CURLE_OBSOLETE24)               return "OBSOLETE 24";
  if(code == CURLE_UPLOAD_FAILED)            return "UPLOAD FAILED";
  if(code == CURLE_READ_ERROR)               return "READ ERROR";
  if(code == CURLE_OUT_OF_MEMORY)            return "OUT OF MEMORY";
  if(code == CURLE_OPERATION_TIMEDOUT)       return "CURLE OPERATION TIMEDOUT";
  if(code == CURLE_OBSOLETE29)               return "OBSOLETE 29";
  if(code == CURLE_FTP_PORT_FAILED)          return "FTP PORT FAILED";
  if(code == CURLE_FTP_COULDNT_USE_REST)     return "FTP COULDNT USE REST";
  if(code == CURLE_OBSOLETE32)               return "OBSOLETE 32";
  if(code == CURLE_RANGE_ERROR)              return "RANGE ERROR";
  if(code == CURLE_HTTP_POST_ERROR)          return "HTTP POST ERROR";
  if(code == CURLE_SSL_CONNECT_ERROR)        return "SSL CONNECT ERROR";
  if(code == CURLE_BAD_DOWNLOAD_RESUME)      return "BAD DOWNLOAD RESUME";
  if(code == CURLE_FILE_COULDNT_READ_FILE)   return "FILE COULDNT READ FILE";
  if(code == CURLE_LDAP_CANNOT_BIND)         return "LDAP CANNOT BIND";
  if(code == CURLE_LDAP_SEARCH_FAILED)       return "LDAP SEARCH FAILED";
  if(code == CURLE_OBSOLETE40)               return "OBSOLETE 40";
  if(code == CURLE_FUNCTION_NOT_FOUND)       return "FUNCTION_NOT FOUND";
  if(code == CURLE_ABORTED_BY_CALLBACK)      return "ABORTED BY CALLBACK";
  if(code == CURLE_BAD_FUNCTION_ARGUMENT)    return "BAD FUNCTION ARGUMENT";
  if(code == CURLE_OBSOLETE44)               return "OBSOLETE 44";
  if(code == CURLE_INTERFACE_FAILED)         return "INTERFACE FAILED";
  if(code == CURLE_OBSOLETE46)               return "OBSOLETE 46";
  if(code == CURLE_TOO_MANY_REDIRECTS )      return "TOO MANY REDIRECTS";
  if(code == CURLE_UNKNOWN_TELNET_OPTION)    return "UNKNOWN TELNET OPTION";
  if(code == CURLE_TELNET_OPTION_SYNTAX )    return "TELNET OPTION SYNTAX";
  if(code == CURLE_OBSOLETE50)               return "OBSOLETE 50";
  if(code == CURLE_PEER_FAILED_VERIFICATION) return "PEER FAILED VERIFICATION";
  if(code == CURLE_GOT_NOTHING)              return "GOT NOTHING";
  if(code == CURLE_SSL_ENGINE_NOTFOUND)      return "SSL ENGINE NOTFOUND";
  if(code == CURLE_SSL_ENGINE_SETFAILED)     return "SSL ENGINE SETFAILED";
  if(code == CURLE_SEND_ERROR)               return "SEND ERROR";
  if(code == CURLE_RECV_ERROR)               return "RECV ERROR";
  if(code == CURLE_OBSOLETE57)               return "OBSOLETE 57";
  if(code == CURLE_SSL_CERTPROBLEM)          return "SSL CERTPROBLEM";
  if(code == CURLE_SSL_CIPHER)               return "SSL CIPHER";
  if(code == CURLE_SSL_CACERT)               return "SSL CACERT";
  if(code == CURLE_BAD_CONTENT_ENCODING)     return "BAD CONTENT ENCODING";
  if(code == CURLE_LDAP_INVALID_URL)         return "LDAP INVALID URL";
  if(code == CURLE_FILESIZE_EXCEEDED)        return "FILESIZE EXCEEDED";
  if(code == CURLE_USE_SSL_FAILED)           return "USE SSL FAILED";
  if(code == CURLE_SEND_FAIL_REWIND)         return "SEND FAIL REWIND";
  if(code == CURLE_SSL_ENGINE_INITFAILED)    return "SSL ENGINE INITFAILED";
  if(code == CURLE_LOGIN_DENIED)             return "LOGIN DENIED";
  if(code == CURLE_TFTP_NOTFOUND)            return "TFTP NOTFOUND";
  if(code == CURLE_TFTP_PERM)                return "TFTP PERM";
  if(code == CURLE_REMOTE_DISK_FULL)         return "REMOTE DISK FULL";
  if(code == CURLE_TFTP_ILLEGAL)             return "TFTP ILLEGAL";
  if(code == CURLE_TFTP_UNKNOWNID)           return "TFTP UNKNOWNID";
  if(code == CURLE_REMOTE_FILE_EXISTS)       return "REMOTE FILE EXISTS";
  if(code == CURLE_TFTP_NOSUCHUSER)          return "TFTP NOSUCHUSER";
  if(code == CURLE_CONV_FAILED)              return "CONV FAILED";
  if(code == CURLE_CONV_REQD)                return "CONV REQD";
  if(code == CURLE_SSL_CACERT_BADFILE)       return "SSL CACERT BADFILE";
  if(code == CURLE_REMOTE_FILE_NOT_FOUND)    return "REMOTE FILE NOT FOUND";
  if(code == CURLE_SSH)                      return "SSH";
  if(code == CURLE_SSL_SHUTDOWN_FAILED)      return "SSL SHUTDOWN FAILED";
  if(code == CURLE_AGAIN)                    return "AGAIN";
  if(code == CURLE_SSL_CRL_BADFILE)          return "SSL CRL BADFILE";
  if(code == CURLE_SSL_ISSUER_ERROR)         return "SSL ISSUER ERROR";
  if(code == CURLE_FTP_PRET_FAILED)          return "FTP PRET FAILED";
  if(code == CURLE_RTSP_CSEQ_ERROR)          return "RTSP CSEQ ERROR";
  if(code == CURLE_RTSP_SESSION_ERROR)       return "RTSP SESSION ERROR";
  if(code == CURLE_FTP_BAD_FILE_LIST)        return "FTP BAD FILE_LIST";
  if(code == CURLE_CHUNK_FAILED)             return "CHUNK FAILED";
  /*some unknown code*/                      return "UNKNOWN CURL ERROR CODE";
}
